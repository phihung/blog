[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hey, Iâ€™m Phi â€“ a developer, AI engineer, and founder with a passion for building cool stuff.\nI mostly write about things I enjoy, like AI, Python, Rust, and Math. You might see me dive into other tech topics too as I explore new things. Itâ€™s all pretty laid-back, and Iâ€™m just sharing what I find interesting or useful.\nIf any of this helps you out, awesome! Feel free to reach out if you have questions or just want to chat â€“ Iâ€™d love to connect."
  },
  {
    "objectID": "posts/python-setup-2024/index.html",
    "href": "posts/python-setup-2024/index.html",
    "title": "Setting Up a Python Project in 2024: uv and vscode",
    "section": "",
    "text": "Minimal setup to start a python project in 2024: with uv, vscode, ruff and pytest."
  },
  {
    "objectID": "posts/python-setup-2024/index.html#meet-astra-uv",
    "href": "posts/python-setup-2024/index.html#meet-astra-uv",
    "title": "Setting Up a Python Project in 2024: uv and vscode",
    "section": "Meet Astra UV",
    "text": "Meet Astra UV\n\nWhatâ€™s UV, Anyway?\nUV is the new superhero of Python package and project management, built in Rust by the same masterminds behind ruff. If you havenâ€™t been keeping up with the latest Python buzz, let me catch you up: in 2024, Astra, ruff, and uv are kind of a big deal.\nSo, whatâ€™s the fuss about? Imagine combining the best tricks from Rustâ€™s cargo and JavaScriptâ€™s npm, and then making it blazing fast. Thatâ€™s UVâ€”20x faster than other tools in the game.\n\nOver the years, Iâ€™ve dabbled with pretty much every Python packaging tool out there: virtualenv, conda, setuptools, pip, pyenv, poetryâ€”you name it. At first, they all seem like magic. But then the cracks start to show: weird edge cases, building from source, private repos, OS-specific versionsâ€”it can get messy. After three months with uv on 10+ projects, Iâ€™ve got a feeling this is the one. But, letâ€™s see what the future holdsâ€¦\n\n\nBasic Usage\nInstalling uv is simple:\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nTo set up a project:\nuv init . --package\n\n# Add dev dependencies:\n#   ruff for linting and formatting\n#   ipykernel for using Jupyter in VSCode\nuv add --dev ruff ipykernel pytest pytest-cov mypy\n\n# Add project dependencies\nuv add python-fasthtml pandas duckdb\nThese commands took less than 3 seconds on my PC. This changes everything.\n\n\n\n\n\n\nOne Env per Project\n\n\n\nThereâ€™s no need to reuse virtual environments anymore! It only takes seconds to create a new one.\n\n\nThe following structure is created:\n\npyproject.toml file\n.venv/ local virtual Python environment\nuv.lock file, recording the exact version of every installed dependency, including sub-dependencies and their versions\nsrc/myapp/__init__.py project structure\n\nuv smartly avoids installing another Python version. Instead, it creates a symlink to my local Python 3.11\nTo sync between pyproject.toml and .venvâ€”for example, after cloning a project:\n# Install the versions recorded in uv.lock\nuv sync\n\n# Or update the packages and uv.lock\n# Note: Itâ€™s your responsibility to ensure everything works before committing\nuv sync --upgrade\n\n\n\n\n\n\nPro Tip: Always commit your uv.lock file! It keeps your project bulletproof when collaborating.\n\n\n\nThis ensures the entire team works with the same package versions.\nThese same versions will be used during deployment, and it keeps track of the last working configuration in case of conflicts.\n\n\n\n\nRunning and Importing with UV\nWhen you run uv sync, it installs your project as an editable package, making it accessible anywhere within the same virtual environment (venv). This means you can easily do import myapp in your notebooks/wip/Untitled27.ipynb, without the usual os.path.insert(0, \"...\") hacks to handle imports. ðŸŽ‰\nTo make sure youâ€™re running in the correct environment, you can use uv run. Here are a few examples:\nuv run python script.py\nuv run myapp.main\nuv run pytest\nuv run mypy\nHonestly, Iâ€™ve just scratched the surface of what uv can do. The tool is still evolving, but itâ€™s already powerful. If youâ€™re curious, check out the official docs, which are top-notch."
  },
  {
    "objectID": "posts/python-setup-2024/index.html#pyproject.toml---the-one-file-to-rule-them-all",
    "href": "posts/python-setup-2024/index.html#pyproject.toml---the-one-file-to-rule-them-all",
    "title": "Setting Up a Python Project in 2024: uv and vscode",
    "section": "pyproject.toml - The One File to Rule Them All",
    "text": "pyproject.toml - The One File to Rule Them All\npyproject.toml is the heart of your setup. Itâ€™s the single file that defines your projectâ€™s dependencies, build configuration, and tooling preferencesâ€”all in one place. Whether youâ€™re managing packages, setting up development environments, or configuring linters like ruff, this file handles it all.\nHere is what the file looks like\n[project]\n1name = \"myapp\"\nversion = \"0.1.0\"  \ndescription = \"Add your description here\"\nreadme = \"README.md\"\n2requires-python = \"&gt;=3.11\"\n3dependencies = [\n    \"duckdb&gt;=1.0.0\",\n    \"python-fasthtml&gt;=0.5.1\",\n]\n\n4[tool.uv.sources]\npython-fasthtml = { git = \"https://github.com/AnswerDotAI/fasthtml.git\" }\n\n5[project.scripts]\nhello = \"myapp:hello\"\n\n6[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.uv]\n7dev-dependencies = [\n    \"ipykernel&gt;=6.29.5\",\n    \"pytest&gt;=8.3.2\",\n    \"pytest-cov&gt;=5.0.0\",\n]\n\n8[tool.ruff]\nline-length = 100\ntarget-version = \"py311\"\n\n9[tool.pytest.ini_options]\naddopts = \"--base-url http://0.0.0.0:5001\"\n\n[tool.mypy]\nwarn_return_any = False\n\n1\n\nName of the project/package and other metadata\n\n2\n\nPython version, managed by uv\n\n3\n\nPyPI dependencies\n\n4\n\nUV config: Dependencies built from source\n\n5\n\nEntry points (e.g., CLI commands)\n\n6\n\nBuild configuration\n\n7\n\nDev dependencies for tools like linters, formatters, and test suites (managed by uv)\n\n8\n\nTool config for ruff, which replaces isort, black, and flake8\n\n9\n\nTool config for pytest\n\n\nNo more messing around with separate requirements.txt, requirements_dev.txt, pytest.ini, tox.ini, and other scattered config files.\nWait, what about isort, black, and flake8? Donâ€™t worry! All three have been replaced by the all-in-one magic of ruffâ€”another brilliant tool from the Astra ecosystem.\n\nEntry points\nYou can turn any Python function (that doesnâ€™t require arguments) into a command-line interface (CLI) tool just by adding a line to the [project.scripts] section in your pyproject.toml.\nExample:\nCode\n# myapp/__init__.py\nimport argparse\n\ndef start_app():\n    parser = argparse.ArgumentParser(description=\"Start the app\")\n    parser.add_argument(\"--port\", type=int, help=\"Port number\")\n    args = parser.parse_args()\n    print(f\"App started at port {args.port}\")\nConfig\n# pyproject.toml\n[project.scripts]\nstart = \"myapp:start_app\"\nRun\nuv run start --help\nuv run start --port 1234\n# &gt; App started at port 1234\nThe possibilities are endless! You can create your own custom commands for anythingâ€”from running scripts to automating build tasksâ€”right from your terminal."
  },
  {
    "objectID": "posts/python-setup-2024/index.html#vscode",
    "href": "posts/python-setup-2024/index.html#vscode",
    "title": "Setting Up a Python Project in 2024: uv and vscode",
    "section": "Vscode",
    "text": "Vscode\nConfiguring VSCode for Python in 2024 can still be a tricky dance. Everything works seamlesslyâ€”until it doesnâ€™t. No autocomplete? Breakpoints not triggering? Debugging doesnâ€™t work with tests or notebooks? You get the idea.\nAfter countless frustrating searches, Iâ€™ve arrived at a minimal, understandable configuration that consistently works for me. Now, I just copy it from project to project. Hereâ€™s my setup, with comments:\n// Extensions to install:\n//  - Python (Microsoft)\n//  - Jupyter (Microsfot)\n//  - Ruff (Astral Software)\n//\n// .vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n1  \"[python]\": {\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    \"editor.codeActionsOnSave\": {\n      \"source.fixAll\": \"explicit\",\n      \"source.organizeImports\": \"explicit\"\n    }\n  },\n  \"[json]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"notebook.formatOnSave.enabled\": true,\n2  \"notebook.codeActionsOnSave\": {\n    // \"notebook.source.fixAll\": \"explicit\",\n    // \"notebook.source.organizeImports\": \"explicit\"\n  },\n  \"notebook.output.wordWrap\": true,\n  \"notebook.output.textLineLimit\": 200,\n3  \"jupyter.debugJustMyCode\": false,\n  \"python.testing.pytestEnabled\": true,\n  \"python.testing.pytestArgs\": [\"tests\"],\n4  \"files.exclude\": {\n    \"**/*.egg-info\": true,\n    \"**/htmlcov\": true,\n    \"**/~$*\": true,\n    \"**/.coverage.*\": true,\n    \"**/.venv\": true,\n    \"**/__pycache__\": true,\n    \"**/.mypy_cache\": true,\n    \"**/.pytest_cache\": true,\n  }\n}\n\n// .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Debug Tests\",\n      \"type\": \"debugpy\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"purpose\": [\"debug-test\"],\n      \"console\": \"integratedTerminal\",\n      \"justMyCode\": false,\n5      \"env\": { \"PYTEST_ADDOPTS\": \"--no-cov\" }\n    }\n  ]\n}\n\n1\n\nFormat on Save: Automatically formats Python code and organizes imports using ruff on save.\n\n2\n\nNotebooks: Enables formatting, but ruff wonâ€™t remove unused imports.\n\n3\n\nDebugging Notebooks: Set debugJustMyCode to false here, not just in launch.json.\n\n4\n\nExcluded Files: Hides unnecessary files from the editor.\n\n5\n\nDebugging with Tests: Prevents conflicts by disabling coverage while debugging."
  },
  {
    "objectID": "posts/python-setup-2024/index.html#and-youre-ready-to-go",
    "href": "posts/python-setup-2024/index.html#and-youre-ready-to-go",
    "title": "Setting Up a Python Project in 2024: uv and vscode",
    "section": "And youâ€™re ready to goâ€¦",
    "text": "And youâ€™re ready to goâ€¦\nWith everything set up, your project structure should look like this:\n.venv/\n.vscode/\n  settings.jon\n  launch.json\n.gitignore\npyproject.toml\nREADME.md\nsrc/myapp/\n  __init__.py\ntests/\nNow youâ€™ve got a fully configured Python project with all the modern tools, ready for development in 2024 and beyond!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Random Bytes",
    "section": "",
    "text": "Setting Up a Python Project in 2024: uv and vscode\n\n\n\n\n\n\npython\n\n\npackaging\n\n\n\n\n\n\n\n\n\nSep 8, 2024\n\n\nphi\n\n\n\n\n\n\nNo matching items"
  }
]